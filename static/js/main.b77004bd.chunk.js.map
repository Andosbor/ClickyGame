{"version":3,"sources":["components/Header.js","components/ClickBox.js","components/Navbar.js","App.js","index.js"],"names":["Header","react_default","a","createElement","className","ClickBox","props","alt","name","src","image","key","index","Navbar","App","state","characters","array","shuffled","sort","Math","random","console","log","this","shuffle","_this2","components_Navbar","components_Header","map","character","components_ClickBox","onClick","test","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"i1DAWeA,MARf,WACI,OACIC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAAlB,gCCQOC,MAVf,SAAkBC,GACd,OACEL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKI,IAAKD,EAAME,KAAMC,IAAKH,EAAMI,MAAOC,IAAKL,EAAMM,iBCM9CC,MAVf,WACI,OACIZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,8BAAhB,yBACAH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,8BAAhB,4BACAH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,8BAAhB,oCCkFGU,6MA5EXC,MAAQ,CACNC,WAAaA,EACbJ,MAAOI,EAAWJ,8EAKfK,GACP,IAAIC,EAAWD,EAAME,KAAK,kBAAMC,KAAKC,SAAW,KAEhD,OADAC,QAAQC,IAAI,aACLL,4CAOLI,QAAQC,IAAIC,KAAKlB,MAAME,0CAgCzBgB,KAAKC,QAAQT,oCAIN,IAAAU,EAAAF,KACP,OACEvB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACwB,EAAD,MACA1B,EAAAC,EAAAC,cAACyB,EAAD,MACA3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdoB,KAAKT,MAAMC,WAAWa,IAAI,SAACC,EAAUlB,GACnC,OAAQX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACtBH,EAAAC,EAAAC,cAAC4B,EAAD,CAAUC,QAASN,EAAKD,QAAQT,GAAYiB,KAAMX,QAAQC,IAAIO,EAAUlB,OACtEJ,KAAMsB,EAAUtB,KAChBE,MAAOoB,EAAUpB,MACjBC,IAAKmB,EAAUlB,qBAnEXsB,aCPlBC,IAASC,OAAOnC,EAAAC,EAAAC,cAACkC,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.b77004bd.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../styles/Header.css\";\r\n\r\nfunction Header() {\r\n    return (\r\n        <header className=\"header\">\r\n           Garfield Clicky Game!\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport \"../styles/ClickBox.css\";\r\n\r\nfunction ClickBox(props) {\r\n    return (\r\n      <div className=\"card\">\r\n        <div className=\"img-container\">\r\n          <img alt={props.name} src={props.image} key={props.index} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default ClickBox;","import React from \"react\";\r\nimport \"../styles/Navbar.css\";\r\n\r\nfunction Navbar() {\r\n    return (\r\n        <nav className=\"navbar row\">\r\n            <span className=\"col-2 navbar-brand mb-0 h1\">Garfield Clicky Game!</span>\r\n            <span className=\"col-2 navbar-brand mb-0 h1\">Click an image to begin!</span>\r\n            <span className=\"col-2 navbar-brand mb-0 h1\">Score: 0 | Top Score: 0</span>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React, {Component} from 'react';\nimport './styles/App.css';\nimport Header from \"./components/Header\";\nimport ClickBox from \"./components/ClickBox\";\nimport Navbar from \"./components/Navbar\";\nimport characters from \"./characters.json\";\n \n\n//on click, if isClicked is false then add 1 to score and shuffle\n          //if isClicked is true, reset Game\n\n\nclass App extends Component {\n\n    state = {\n      characters : characters,\n      index: characters.index\n    };\n\n    \n\n shuffle(array) {\n  var shuffled = array.sort(() => Math.random() - 0.5);\n  console.log(\"shuffling\");\n  return shuffled;\n}\n\n updateIsClicked() {\n  // Note: this will *not* work as intended.\n  //this.setState({isClicked: true});\n  \n    console.log(this.props.name)\n  \n}\n\n/*\nresetIsClicked(index) {\n  for() {\n  this.setState({this.state.randomized[index].isClicked: true})\n  }\n}\n\nhandleSomething() {\n  // Let's say `this.state.count` starts at 0.\n  this.incrementCount();\n  this.incrementCount();\n  this.incrementCount();\n  // When React re-renders the component, `this.state.count` will be 1, but you expected 3.\n\n  // This is because `incrementCount()` function above reads from `this.state.count`,\n  // but React doesn't update `this.state.count` until the component is re-rendered.\n  // So `incrementCount()` ends up reading `this.state.count` as 0 every time, and sets it to 1.\n\n  // The fix is described below!\n}\n*/\n\n// var randomized = shuffle(characters);\n// console.log({randomized});\n\n resetGame(){\n  //resetScore() (need to build this function)\n  //setTopScore() (need to build this function)\n  this.shuffle(characters);\n}\n//must add an index to each image\n\nrender() {\n  return (\n    <div>\n      <Navbar/>\n      <Header/>\n      <div className=\"jumbotron\">\n        <div className=\"row\">\n        {this.state.characters.map((character,index)=>{\n           return (<div className=\"col-3\">\n            <ClickBox onClick={this.shuffle(characters)}test={console.log(character.index)}\n              name={character.name}\n              image={character.image}\n              key={character.index}\n            />\n          </div>)\n        })}\n        </div>\n      </div>\n    </div>\n  );\n}\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}